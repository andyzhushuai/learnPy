网页:
https://developers.google.com/edu/python/lists
Python Lists
Python has a great built-in list type named "list". List literals are written within square brackets [ ]. Lists work similarly to strings -- use the len() function and square brackets [ ] to access data, with the first element at index 0. (See the official python.org list docs.)
Python 有一个叫做“list”的结构。List的值是包含在方括号中。Lists的作用比较像strings--使用函数len()和方括号[]获得数据值，第一个元素的索引为0.
  colors = ['red', 'blue', 'green']
  print colors[0]    ## red
  print colors[2]    ## green
  print len(colors)  ## 3

Assignment with an = on lists does not make a copy. Instead, assignment makes the two variables point to the one list in memory.
用“=”来为lists赋值，并不是复制。而是，在内存中，赋值是令两个变量指向同一个list.
  b = colors   ## Does not copy the list

“空list”仅仅是空的中括号[]。"+"可以用于append两个lists，所以[1, 2] + [3, 4] 得到 [1, 2, 3, 4](这就像strings中的“+”)
The "empty list" is just an empty pair of brackets [ ]. The '+' works to append two lists, so [1, 2] + [3, 4] yields [1, 2, 3, 4] (this is just like + with strings).

FOR and IN
FOR 和 IN
Python's *for* and *in* constructs are extremely useful, and the first use of them we'll see is with lists. The *for* construct -- for var in list -- is an easy way to look at each element in a list (or other collection). Do not add or remove from the list during iteration.
Python 的 *for*和*in*的构造是非常有用的，首先是在lists中。*for*的构造--for var in list--是一个非常简单的方式来查看一个list(或其他数据集)中任一元素.不要在迭代中删除或增加元素。

  squares = [1, 4, 9, 16]
  sum = 0
  for num in squares:
    sum += num
  print sum  ## 30
If you know what sort of thing is in the list, use a variable name in the loop that captures that information such as "num", or "name", or "url". Since python code does not have other syntax to remind you of types, your variable names are a key way for you to keep straight what is going on.
如果你知道list中的排序，在遍历中，使用变量名抓取信息，例如“num”，“name”或“url”。由于python代码没有其他语法来提醒你变量类型，所以你的变量名是一个关键的方式来确定发生了什么。

The *in* construct on its own is an easy way to test if an element appears in a list (or other collection) -- value in collection -- tests if the value is in the collection, returning True/False.
*in*是一个简单的方式来测试某个元素是否在list中(或其他数据集)--value in list--测试value是否在list中，返回True/False.

  list = ['larry', 'curly', 'moe']
  if 'curly' in list:
    print 'yay'
The for/in constructs are very commonly used in Python code and work on data types other than list, so you should just memorize their syntax. You may have habits from other languages where you start manually iterating over a collection, where in Python you should just use for/in.
for/in在Python中是非常常用的，而且不仅用在list中，所以我们只需要记住他们的语法。我们需要养成一个习惯：当应用一门语言在数据集中迭代时，尝试这个语法。在Python中，我们只需使用“for/in”。

You can also use for/in to work on a string. The string acts like a list of its chars, so for ch in s: print ch prints all the chars in a string.
我们也可以在string中使用for/in，string比较像chars类型的list，所以“for ch in s: print ch” 可以打印所有在这个string中的chars。

Range
The range(n) function yields the numbers 0, 1, ... n-1, and range(a, b) returns a, a+1, ... b-1 -- up to but not including the last number. The combination of the for-loop and the range() function allow you to build a traditional numeric for loop:
range(n)函数是一个包含了0, 1, ... n-1的list，range(a, b)函数是一个包含了a, a+1, ... b-1但不包含最后一个数字。for遍历和rang()函数可以生成一个传统的数字集：

  ## print the numbers from 0 through 99
  for i in range(100):
    print i
There is a variant xrange() which avoids the cost of building the whole list for performance sensitive cases (in Python 3000, range() will have the good performance behavior and you can forget about xrange()).
range()的变种xrange()可以避免构造整个list的消耗，特别是在关注性能的地方(在Python3000,range()函数的性能很好，因此我们可以不用xrange())。

While Loop
Python also has the standard while-loop, and the *break* and *continue* statements work as in C++ and Java, altering the course of the innermost loop. The above for/in loops solves the common case of iterating over every element in a list, but the while loop gives you total control over the index numbers. Here's a while loop which accesses every 3rd element in a list:
Python中标准的while-loop，在C++和Java中，我们可以用*break*和*continue*，改变内在循环。上面提到的for/in遍历解决了在list中迭代每个元素的问题，但是while loop可以为我们管理list的索引。下面是循环输出一个list中每隔2个的元素：

  ## Access every 3rd element in a list
  i = 0
  while i < len(a):
    print a[i]
    i = i + 3
List Methods
下面是一些其他的list方法。
Here are some other common list methods.

list.append(elem) -- adds a single element to the end of the list. Common error: does not return the new list, just modifies the original.
list.append(elem) -- 在list尾部，增加一个元素。常见的错误：没有返回新list，仅仅修改了原始list。
list.insert(index, elem) -- inserts the element at the given index, shifting elements to the right.
list.insert(index, elem) -- 在索引为index的元素右侧插入元素“elem”。
list.extend(list2) adds the elements in list2 to the end of the list. Using + or += on a list is similar to using extend().
list.extend(list2) -- 在list的尾部添加list2中的元素。类似的操作有“+”或“+=”。
list.index(elem) -- searches for the given element from the start of the list and returns its index. Throws a ValueError if the element does not appear (use "in" to check without a ValueError).
list.index(elem) -- 查找并返回list中elem的索引值。如果没有elem，则抛出ValueError(使用"in"来检查ValueError)
list.remove(elem) -- searches for the first instance of the given element and removes it (throws ValueError if not present)
list.remove(elem) -- 查找并删除第一次出现elem的元素(若list没有elem，则抛出ValueError)
list.sort() -- sorts the list in place (does not return it). (The sorted() function shown below is preferred.)
list.sort() -- 排序list(没有返回)。(更推荐下面的sorted()函数)
list.reverse() -- reverses the list in place (does not return it)
list.reverse() -- 反转list(没有返回)。
list.pop(index) -- removes and returns the element at the given index. Returns the rightmost element if index is omitted (roughly the opposite of append()).
list.pop(index) -- 删除并返回索引为index的元素值。如果索引值省略，则删除并返回最后一个元素。(append()函数的反作用)
Notice that these are *methods* on a list object, while len() is a function that takes the list (or string or whatever) as an argument.
注意，这些*methods*全都包含在list对象中，但len()函数把list(或string、其他数据结构)当作参数。

  list = ['larry', 'curly', 'moe']
  list.append('shemp')         ## append elem at end
  list.insert(0, 'xxx')        ## insert elem at index 0
  list.extend(['yyy', 'zzz'])  ## add list of elems at end
  print list  ## ['xxx', 'larry', 'curly', 'moe', 'shemp', 'yyy', 'zzz']
  print list.index('curly')    ## 2

  list.remove('curly')         ## search and remove that element
  list.pop(1)                  ## removes and returns 'larry'
  print list  ## ['xxx', 'moe', 'shemp', 'yyy', 'zzz']
Common error: note that the above methods do not *return* the modified list, they just modify the original list.
常见错误：如上方法没有返回修改后的list，他们仅修改原list。

  list = [1, 2, 3]
  print list.append(4)   ## NO, does not work, append() returns None
  ## Correct pattern:
  list.append(4)
  print list  ## [1, 2, 3, 4]
List Build Up
One common pattern is to start a list a the empty list [], then use append() or extend() to add elements to it:
比较常见的形式是开始新建一个空list []，然后用append()或extend()添加元素：

  list = []          ## Start as the empty list
  list.append('a')   ## Use append() to add elements
  list.append('b')
List Slices
Slices work on lists just as with strings, and can also be used to change sub-parts of the list.
类似于strings，lists同样可以切片，这个方法經常用于子list。

  list = ['a', 'b', 'c', 'd']
  print list[1:-1]   ## ['b', 'c']
  list[0:2] = 'z'    ## replace ['a', 'b'] with ['z']
  print list         ## ['z', 'c', 'd']

